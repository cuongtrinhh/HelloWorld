name: dotnet package

on: 
  push:
    branches: [ main ]
  release:
    types: [published]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}
  # Deployment configuration
  DEPLOY_SERVER: ${{ secrets.DEPLOY_SERVER }}
  DEPLOY_USERNAME: ${{ secrets.DEPLOY_USERNAME }}
  DEPLOY_SSH_KEY: ${{ secrets.DEPLOY_SSH_KEY }}
  DEPLOY_PORT: ${{ secrets.DEPLOY_PORT || '22' }}
  DEPLOY_CONTAINER_NAME: ${{ secrets.DEPLOY_CONTAINER_NAME || 'helloworld' }}

jobs:
  build:
    runs-on: ubuntu-24.04
    env:
      DOTNET_SYSTEM_GLOBALIZATION_INVARIANT: 1
  
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Install GitVersion
        uses: gittools/actions/gitversion/setup@v0.12.0
        with:
          versionSpec: '5.x'

      - name: Determine Version
        uses: gittools/actions/gitversion/execute@v0.12.0
        with:
          useConfigFile: true

      - name: Set up .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '9.0.x'

      - name: Install OpenSSL
        run: sudo apt-get install libssl3 -y
          
      - name: Restore Nuget packages
        run: dotnet restore HelloWorld.csproj

      - name: Test
        run: dotnet test HelloWorld.csproj        

      - name: Build project
        run: dotnet build HelloWorld.csproj -c Release -o build

      - name: Pack
        run: dotnet pack HelloWorld.csproj -c Release --output nupkgs /p:Version=${{ env.GitVersion_NuGetVersion }}

      - name: Create IIS Deployment Package
        run: |
          dotnet publish HelloWorld.csproj -c Release -o publish \
            --runtime win-x64 \
            --self-contained false \
            /p:Version=${{ env.GitVersion_NuGetVersion }}
          cd publish
          zip -r ../webapp.zip ./*

      - name: Upload IIS Deployment Package
        uses: actions/upload-artifact@v4
        with:
          name: iis-deployment
          path: webapp.zip
          retention-days: 5

      # Docker build and push steps
      - name: Log in to the Container registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=sha,format=short

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      # Deployment step
      - name: Deploy to server
        if: env.DEPLOY_SERVER != ''
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ env.DEPLOY_SERVER }}
          username: ${{ env.DEPLOY_USERNAME }}
          key: ${{ env.DEPLOY_SSH_KEY }}
          port: ${{ env.DEPLOY_PORT }}
          script: |
            # Login to GitHub Container Registry
            echo ${{ secrets.GITHUB_TOKEN }} | docker login ghcr.io -u ${{ github.actor }} --password-stdin
            
            # Pull the latest image
            docker pull ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:main
            
            # Stop and remove existing container if it exists
            docker stop ${{ env.DEPLOY_CONTAINER_NAME }} || true
            docker rm ${{ env.DEPLOY_CONTAINER_NAME }} || true
            
            # Run the new container
            docker run -d \
              --name ${{ env.DEPLOY_CONTAINER_NAME }} \
              --restart unless-stopped \
              -p 80:80 \
              -p 443:443 \
              ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:main
            
            # Clean up old images
            docker image prune -f